# org: andrevinicius201
# app: todo-list
service: serverless-home-challenge

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Scan"
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/todos"

functions:
  createTodo:
    handler: crud_functions/createTodo.process
    events:
      - http:
          path: todos
          method: post
          integration: lambda
          request:
            schemas:
              application/json: ${file(./schemas/createTodo.json)}
          cors: true
  getAllTodos:
    handler: crud_functions/getAllTodos.process
    events:
      - http:
          path: todos
          method: get
          integration: lambda
          cors: true
  getTodo:
    handler: crud_functions/getTodo.process
    events:
      - http:
          path: todos/{id}
          method: get
          integration: lambda
          cors: true
  updateTodo:
    handler: crud_functions/updateTodo.process
    events:
      - http:
          path: todos/{id}
          method: put
          integration: lambda
          request:
            schemas:
              application/json: ${file(./schemas/updateTodo.json)}
            parameters:
              paths:
                id: true
          cors: true
  deleteTodo:
    handler: crud_functions/deleteTodo.process
    events:
      - http:
          path: todos/{id}
          method: delete
          integration: lambda
          cors: true
  deleteAllTodos:
    handler: crud_functions/deleteAllTodos.process
    events:
      - http:
          path: todos/
          method: delete
          integration: lambda
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: todos
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseInvalidRequestBody:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: BAD_REQUEST_BODY 
        RestApiId: !Ref ApiGatewayRestApi
        ResponseTemplates:
          application/json: "{\"statusCode\": 400, \"error\": \"$context.error.validationErrorString\"}"
    InvalidAPIKey:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: INVALID_API_KEY 
        RestApiId: !Ref ApiGatewayRestApi
        ResponseTemplates:
          application/json: "{\"statusCode\": 403, \"error\": \"You must provide an API key\"}"

custom:
  apiGateway:
    requestValidators:
      bodyValidator: 
        name: bodyValidator
        validateRequestBody: true
        validateRequestParameters: true
  pythonRequirements:
    ddockerizePip: false

plugins:
  - serverless-offline
  - serverless-python-requirements
